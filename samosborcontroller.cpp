#include "samosborcontroller.h"
#include <QRandomGenerator>
#include <QDebug>

SamosborController::SamosborController(QObject *parent)
    : QObject(parent),
    mainTimer(new QTimer(this)),
    rangeShrinkTimer(new QTimer(this)),
    currentState(State::Idle),
    currentMinRange(initialMinRange),
    currentMaxRange(initialMaxRange),
    startTime(QTime(0,0)),
    lastSamosborTime(QDateTime::currentDateTime().addSecs(-cooldownSeconds))
{
    connect(mainTimer, &QTimer::timeout, this, &SamosborController::update);
    connect(rangeShrinkTimer, &QTimer::timeout, this, &SamosborController::handleRangeShrink);
}

SamosborController::~SamosborController()
{
    mainTimer->stop();
    rangeShrinkTimer->stop();
}

void SamosborController::start()
{
    if (currentState == State::Running) return;

    startTime = QTime::currentTime();
    currentState = State::Running;
    emit stateChanged("–ò–¥—ë—Ç");

    mainTimer->start(5000);
    rangeShrinkTimer->start(120000);

    emit logMessage("‚ñ∂ –°–∞–º–æ—Å–±–æ—Ä –∑–∞–ø—É—â–µ–Ω. –î–∏–∞–ø–∞–∑–æ–Ω: -100 / 100");
    emit rangeChanged(getRangeInfo());
    emit timeUpdated(getElapsedTimeString());
}

void SamosborController::pause()
{
    if (currentState != State::Running) return;

    mainTimer->stop();
    rangeShrinkTimer->stop();
    currentState = State::Paused;
    emit stateChanged("–ü–∞—É–∑–∞");

    emit logMessage("‚è∏ –°–∞–º–æ—Å–±–æ—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
}

void SamosborController::resume()
{
    if (currentState != State::Paused) return;

    mainTimer->start(5000);
    rangeShrinkTimer->start(120000);
    currentState = State::Running;
    emit stateChanged("–ò–¥—ë—Ç");

    emit logMessage("‚ñ∂ –°–∞–º–æ—Å–±–æ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω.");
}

void SamosborController::manualTrigger()
{
    triggerSamosbor();
}

void SamosborController::manualSlowdown()
{
    triggerSlowdown();
}

void SamosborController::update()
{
    emit timeUpdated(getElapsedTimeString());
    generateRandomNumber();
}

void SamosborController::generateRandomNumber()
{
    int value = QRandomGenerator::global()->bounded(currentMinRange, currentMaxRange + 1);
    emit logMessage(QString("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–∏—Å–ª–æ: %1").arg(value));

    if (value == currentMaxRange)
    {
        if (lastSamosborTime.secsTo(QDateTime::currentDateTime()) < cooldownSeconds) {
            emit logMessage("üõë –°–∞–º–æ—Å–±–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (–ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞).");
            return;
        }
        triggerSamosbor();
    }
    else if (value == currentMinRange)
    {
        triggerSlowdown();
    }
}

void SamosborController::triggerSamosbor()
{
    lastSamosborTime = QDateTime::currentDateTime();
    currentMinRange = initialMinRange;
    currentMaxRange = initialMaxRange;

    emit rangeChanged(getRangeInfo());
    emit logMessage("‚ò¢ –°–ê–ú–û–°–ë–û–†! –î–∏–∞–ø–∞–∑–æ–Ω —Å–±—Ä–æ—à–µ–Ω.");
    emit stateChanged("–°–ê–ú–û–°–ë–û–†");
}

void SamosborController::triggerSlowdown()
{
    currentState = State::Slowdown;
    emit stateChanged("–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ");
    emit logMessage("‚ö† –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ: –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞.");
}

void SamosborController::handleRangeShrink()
{
    if (currentMinRange < 0) currentMinRange += 10;
    if (currentMaxRange > 0) currentMaxRange -= 10;

    emit rangeChanged(getRangeInfo());
    emit logMessage(QString("üìâ –î–∏–∞–ø–∞–∑–æ–Ω —Å—É–∑–∏–ª—Å—è: %1").arg(getRangeInfo()));
}

QString SamosborController::getElapsedTimeString() const
{
    int seconds = startTime.secsTo(QTime::currentTime());
    return QString("%1:%2")
        .arg(seconds / 60, 2, 10, QChar('0'))
        .arg(seconds % 60, 2, 10, QChar('0'));
}

QString SamosborController::getRangeInfo() const
{
    return QString("%1 / %2").arg(currentMinRange).arg(currentMaxRange);
}

QString SamosborController::getState() const
{
    switch (currentState)
    {
    case State::Idle:      return "–û–∂–∏–¥–∞–Ω–∏–µ";
    case State::Running:   return "–ò–¥—ë—Ç";
    case State::Paused:    return "–ü–∞—É–∑–∞";
    case State::Slowdown:  return "–ó–∞–º–µ–¥–ª–µ–Ω–∏–µ";
    }
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
}

void SamosborController::reset()
{
    mainTimer->stop();
    rangeShrinkTimer->stop();

    currentMinRange = initialMinRange;
    currentMaxRange = initialMaxRange;
    currentState = State::Idle;

    emit rangeChanged(getRangeInfo());
    emit stateChanged("–û–∂–∏–¥–∞–Ω–∏–µ");
    emit logMessage("üîÅ –°–∞–º–æ—Å–±–æ—Ä —Å–±—Ä–æ—à–µ–Ω.");
}
